{
  #description = "DaySquare rust dev environment";
  inputs = {
    nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";
    utils.url = "github:numtide/flake-utils";
    rust-overlay.url = "github:oxalica/rust-overlay";
  };

  outputs = { self, nixpkgs, utils, rust-overlay, ... }:
    let
      system = "x86_64-linux";
      overlays = [ (import rust-overlay) ];
      pkgs = import nixpkgs {
        inherit system overlays;
      };
    in
    {
      devShell."${system}" =
        let
          db_user = "axumstarter";
          db_password = "axumstarter";
          db_port = 5432;
          db_name = "axumstarter";
          db_container_name = "starterDB";

          server_port = 8080;

          configFile = ''
            # Autogenerated: DO NOT EDIT
            # axum_starter backend configuration file.

            database:
                host: ${db_container_name}
                port: ${builtins.toString db_port}
                username: ${db_user}
                password: ${db_password}
                database_name: ${db_name}
            server:
                host: 127.0.0.1
                application_port: ${toString server_port}
          '';

          # Using extra-containers to run postgres database
          containers =
            let
              dbInit = pkgs.writeText "axumDBInitScript" ''
                CREATE USER ${db_user} WITH LOGIN ENCRYPTED PASSWORD ${"'" + db_password + "'"} CREATEDB;
                CREATE DATABASE ${db_name};
                GRANT ALL PRIVILEGES ON DATABASE ${db_name} TO ${db_user};
              '';
            in
            ''
              {
                containers = {
                  "${db_container_name}" = {
                    ephemeral = true;
                    privateNetwork = true;
                    hostAddress = \"10.250.0.1\";
                    localAddress = \"10.250.0.2\";

                    config = { pkgs, ... }: {
                      networking.useDHCP = false;
                      networking.firewall.allowedTCPPorts = [ ${builtins.toString db_port} ];

                      services.postgresql = {
                        enable = true;
                        enableTCPIP = true;
                        port = ${builtins.toString db_port};
                        authentication = pkgs.lib.mkForce '''
                          # Generate file, do not edit!
                          # TYPE    DATABASE    USER    ADDRESS         METHOD
                          local     all         all                     trust
                          host      all         all     10.0.0.1/8      md5
                          host      all         all     ::1/128         md5
                        ''';
                        initialScript = ${dbInit};
                      };
                    };
                  };
                };
              }
            '';
        in
        pkgs.mkShell {
          nativeBuildInputs = with pkgs; [
            pkg-config

            (rust-bin.stable.latest.default.override {
              targets = [ "x86_64-unknown-linux-gnu" ];
            })

            # Rust Cargo & Tools
            cargo
            cargo-edit
            cargo-audit
            cargo-tarpaulin
            cargo-udeps
            clippy

            # Database
            sqlx-cli
            postgresql # (for psql)

            # Server logs formatter
            bunyan-rs
          ];

          shellHook =
            let
              closeScript = pkgs.writeShellScriptBin "axumCloseScript" ''
                extra-container destroy "${db_container_name}"
              '';
            in
            ''
              rm ./configuration.yaml
              echo "${configFile}" > ./configuration.yaml

              # Start containers
              extra-container create -E "${containers}" --nixos-path "${nixpkgs}/nixos" --start
              trap ${closeScript}/bin/axumCloseScript EXIT
              sleep 1

              sqlx database create
              sqlx migrate --source ./migrations run
            '';

          DATABASE_URL = "postgres://${db_user}:${db_password}@${db_container_name}:${builtins.toString db_port}/${db_name}";
          PGHOST = db_container_name;
          PGUSER = db_user;
          PGPORT = db_port;
          PGDATABASE = db_name;
        };
    };
}

